#■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
# ☰ Library: Omnia
#■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ☲ Definition
#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
cmake_minimum_required (VERSION 3.8)
project("Omnia" VERSION 0.0.1 DESCRIPTION "Omnia Library" LANGUAGES C CXX)
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
# Build System Extensions
set(PROJECT_RELEASE 2020-07-12)
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
# These variables are used to configure the project settings header.
set(LibCaption ${PROJECT_NAME})
set(LibDescription ${PROJECT_DESCRIPTION})
set(LibRelease ${PROJECT_RELEASE})
set(LibVersion ${PROJECT_VERSION})
set(LibVersionMajor ${PROJECT_VERSION_MAJOR})
set(LibVersionMinor ${PROJECT_VERSION_MINOR})
set(LibVersionPatch ${PROJECT_VERSION_PATCH})
#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ☲ Properties
#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Here should be everything defined, to help developers to customize their builds.
message("✶ Properties")
set(AppLibraryPrime true CACHE BOOL "Configuration and Logging Features." FORCE)
set(AppLibraryDebug false CACHE BOOL "Debugging Extension Features." FORCE)
set(AppLibraryGraphics true CACHE BOOL "Graphics Extensions for graphical context binding over specified API." FORCE)
set(AppLibrarySystem true CACHE BOOL "System Extensions like color output in cli." FORCE)
set(AppLibraryUI true CACHE BOOL "UI Extensions like window creation and event system." FORCE)
set(AppLibraryUtilities true CACHE BOOL "Usefull utilities like date and time, properties and timer helpers, etc." FORCE)
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
set(AppLibraryGfxApi "OpenGL" CACHE BOOL "Which graphics api should be used" FORCE)
# ToDo: Maybe an better alternative?
#add_compile_definitions(APP_LIBRARY_SYSTEM_EXTENSIONS=1)
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
message("  ○ Prime Extensions: ${AppLibraryPrime}")
message("  ○ Debug Extensions: ${AppLibraryDebug}")
message("  ○ Graphic Extensions: ${AppLibraryGraphics}")
message("  ○ System Extensions: ${AppLibrarySystem}")
message("  ○ UI Extensions: ${AppLibraryUI}")
message("  ○ Utility Extensions: ${AppLibraryUtilities}")
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
# ☷ Build
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/Build/${CMAKE_BUILD_TYPE}")
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
include(CMakeSources.cmake)
add_library(Omnia SHARED ${OMNIA_HEADERS} ${OMNIA_SOURCES})
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
# ☷ Compiler
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS TRUE)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS TRUE)
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
# Patch: Needet due to incompability of the WinAPI Library and >C++17 (std::byte)
add_definitions(-D_HAS_STD_BYTE=0)
# Patch: Unicode Support (not needed, cause it is passed with the /utf-8 argument, which has its benefits)
#add_definitions(-DUNICODE -D_UNICODE)
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
if(AppLibraryPrime)
	set(AppLibraryPrimeExtensions "#define APP_LIBRARY_PRIME_EXTENSIONS")
else()
	set(AppLibraryPrimeExtensions "#undef APP_LIBRARY_PRIME_EXTENSIONS")
endif()
if(AppLibraryDebug)
	set(AppLibraryDebugExtensions "#define APP_LIBRARY_DEBUG_EXTENSIONS")
else()
	set(AppLibraryDebugExtensions "#undef APP_LIBRARY_DEBUG_EXTENSIONS")
endif()
if(AppLibraryGraphics)
	set(AppLibraryGraphicExtensions "#define APP_LIBRARY_GRAPHIC_EXTENSIONS")
else()
	set(AppLibraryGraphicExtensions "#undef APP_LIBRARY_GRAPHIC_EXTENSIONS")
endif()
if(AppLibrarySystem)
	set(AppLibrarySystemExtensions "#define APP_LIBRARY_SYSTEM_EXTENSIONS")
else()
	set(AppLibrarySystemExtensions "#undef APP_LIBRARY_SYSTEM_EXTENSIONS")
endif()
if(AppLibraryUI)
	set(AppLibraryUIExtensions "#define APP_LIBRARY_UI_EXTENSIONS")
else()
	set(AppLibraryUIExtensions "#undef APP_LIBRARY_UI_EXTENSIONS")
endif()
if(AppLibraryUtilities)
	set(AppLibraryUtilitiesExtensions "#define APP_LIBRARY_UTILITIES_EXTENSIONS")
else()
	set(AppLibraryUtilitiesExtensions "#undef APP_LIBRARY_UTILITIES_EXTENSIONS")
endif()
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
if(${AppLibraryGfxApi} STREQUAL "Null")
	set(AppLibraryGfxApi "#define APP_GFX_API_NULL")
elseif(${AppLibraryGfxApi} STREQUAL "OpenGL")
	set(AppLibraryGfxApi "#define APP_GFX_API_OPENGL")
elseif(${AppLibraryGfxApi} STREQUAL "DirectX11")
	set(AppLibraryGfxApi "#define APP_GFX_API_DIRECTX11")
elseif(${AppLibraryGfxApi} STREQUAL "DirectX12")
	set(AppLibraryGfxApi "#define APP_GFX_API_DIRECTX12")
elseif(${AppLibraryGfxApi} STREQUAL "Vulkan")
	set(AppLibraryGfxApi "#define APP_GFX_API_VULKAN")
elseif(${AppLibraryGfxApi} STREQUAL "Metal")
	set(AppLibraryGfxApi "#define APP_GFX_API_XGFX_METAL")
else()
	set(AppLibraryGfxApi "")
endif()
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
# ☷ IDE
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
set_property(TARGET Omnia PROPERTY FOLDER Library)
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
# ☷ Linker
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
target_include_directories(Omnia PRIVATE ${CMAKE_BINARY_DIR}/Source/Generated)
target_include_directories(Omnia PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/3rd-Party/.Library)
target_include_directories(Omnia PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Source)
#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ☲ Process
#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
# ☷ Configuration
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
configure_file("Source/Settings.h.in" ${CMAKE_BINARY_DIR}/Source/Generated/${PROJECT_NAME}.settings)
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
# ☷ Sources
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
target_precompile_headers(Omnia PRIVATE "Source/Omnia/Omnia.pch")
add_subdirectory(3rd-Party)
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
# ☷ Libraries
#‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐
set(OmniaLibraries glad imgui)
foreach(Library ${OmniaLibraries})
	message("    - ${Library}")
	target_link_libraries(${PROJECT_NAME} PRIVATE ${Library})
endforeach()
#■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
